package com.farukayata.e_commerce2.ui.fragment

import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.ViewTreeObserver
import android.widget.Toast
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.navigation.fragment.findNavController
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.farukayata.e_commerce2.R
import com.farukayata.e_commerce2.databinding.FragmentCartBinding
import com.farukayata.e_commerce2.model.CartItem
import com.farukayata.e_commerce2.ui.adapter.CartAdapter
import com.farukayata.e_commerce2.ui.adapter.CouponAdapter
import com.farukayata.e_commerce2.ui.viewmodel.CartViewModel
import com.farukayata.e_commerce2.ui.viewmodel.CouponViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collect
import android.widget.Button
import androidx.appcompat.app.AlertDialog

//nullable olabilirlik durumu iÃ§in

@AndroidEntryPoint
class CartFragment : Fragment() {

    private var _binding: FragmentCartBinding? = null
    private lateinit var binding: FragmentCartBinding
    private val viewModel: CartViewModel by viewModels()
    private lateinit var adapter: CartAdapter
    private var discountPrice: Double? = null
    private var finalPrice: Double? = null

    private lateinit var couponAdapter: CouponAdapter //recycler view kullanmÄ±caz duruma gÃ¶re kaldÄ±rÄ±la bilir
    private val couponViewModel: CouponViewModel by viewModels()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentCartBinding.inflate(inflater, container, false)

        // Adapter'Ä± oluÅŸturma ve lambda fonksiyonlarÄ± tanÄ±mlama
        adapter = CartAdapter(
            context = requireContext(),
            onRemoveClick = { productId ->
                //viewModel.removeFromCart(productId) // ÃœrÃ¼nÃ¼ sepetten kaldÄ±rÄ±r
                showDeleteDialog(productId) //Popup ile silme onayÄ± iÃ§in
            },
            onIncreaseClick = { cartItem ->
                val newCount = (cartItem.count ?: 0) - 1 // Null kontrolÃ¼ yapÄ±ldÄ±
                if (newCount > 0) {
                    viewModel.updateItemCount(cartItem.id.orEmpty(), newCount)
                    // Adeti azaltÄ±r
                } else {
                    //viewModel.removeFromCart(cartItem.id.orEmpty())
                    // Adet 0 sa Ã¼rÃ¼nÃ¼ siler
                    showDeleteDialog(cartItem.id.orEmpty())
                //Popup ile onay alarak silme iÃ§in
                }


            },
            onDecreaseClick = { cartItem ->
                val newCount = (cartItem.count ?: 0) + 1 // Null kontrolÃ¼ yapÄ±ldÄ±
                viewModel.updateItemCount(cartItem.id.orEmpty(), newCount) // Adeti artÄ±rÄ±r
            },
            onSwipedToDelete = { productId ->
                //KaydÄ±rarak silme burada popup ile yÃ¶netilecek
                showDeleteDialog(productId)
            }
        )

        // RecyclerView ayarlarÄ±
        binding.recyclerViewCart.layoutManager = LinearLayoutManager(requireContext())
        binding.recyclerViewCart.adapter = adapter

        //RecyclerView'a kaydÄ±rarak silme Ã¶zelliÄŸini ekledik
        adapter.attachSwipeToDelete(binding.recyclerViewCart)


        //lotie ekledik ve sepet boÅŸ olma ve olmama durumu olucaÄŸÄ± iÃ§in artÄ±k aÅŸaÄŸÄ±daki gibi deÄŸilde bi aÅŸaÄŸÄ±daki gibi kullancaz
        // Sepet verilerini gÃ¶zlemle ve RecyclerView'a baÄŸla
//        viewModel.cartItems.observe(viewLifecycleOwner) { cartList ->
//            adapter.submitList(cartList) // Adapter'e yeni listeyi ilet
//            updateTotalPrice(cartList) // Toplam fiyatÄ± gÃ¼ncelle
//        }

        viewModel.cartItems.observe(viewLifecycleOwner) { cartList ->
            if (cartList.isEmpty()) {
                binding.recyclerViewCart.visibility = View.GONE
                binding.emptyCartLayout.visibility = View.VISIBLE
            } else {
                binding.recyclerViewCart.visibility = View.VISIBLE
                binding.emptyCartLayout.visibility = View.GONE
            }

            adapter.submitList(cartList)
            adapter.notifyDataSetChanged()

            if (cartList.isNotEmpty() && adapter.isPreviewSwipe) {
                binding.recyclerViewCart.post {
                    Log.d("CartFragment", "Sahte kaydÄ±rma animasyonu baÅŸlatÄ±lÄ±yor")
                    adapter.isPreviewSwipe = false // ðŸŸ¢ Sadece bir kere Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸla
                }
            }

            updateTotalPrice(cartList)
        }

        binding.buttonShopNow.setOnClickListener {
            findNavController().navigate(R.id.action_cartFragment_to_homeFragment)
        }

        //SatÄ±n Al Butonu - PaymentSelectionFragment'a yÃ¶nlendirme
        binding.btnCheckout.setOnClickListener {
            findNavController().navigate(R.id.action_cartFragment_to_paymentSelectionFragment)
        }

        // Kupon Uygula Butonu
        binding.buttonApplyCoupon.setOnClickListener {
            val couponCode = binding.editTextCouponCode.text.toString().trim()
            if (couponCode.isNotEmpty()) {
                couponViewModel.applyCoupon(couponCode, viewModel.cartItems.value ?: listOf())
            } else {
                // KullanÄ±cÄ± kupon kodunu girmediyse bir uyarÄ± gÃ¶sterebiliriz.
                Toast.makeText(context, "Kupon kodunu girin", Toast.LENGTH_SHORT).show()
            }
            //gereksiz ve sÄ±kÄ±tÄ±lÄ± olabilir !!!!!!!
            couponViewModel.totalPrice.observe(viewLifecycleOwner) { discountedPrice ->
                binding.textViewTotalPrice.text = String.format("Toplam: %.2f TL", discountedPrice)
            }
        }

        //RecyclerView'a kaydÄ±rarak silme Ã¶zelliÄŸini ekliyoruz
        adapter.attachSwipeToDelete(binding.recyclerViewCart)

        return binding.root
    }

    override fun onDestroyView() {
        //Memory Leak Ã–nleme: Fragment kapandÄ±ÄŸÄ±nda UI referanslarÄ±nÄ± serbest bÄ±rakÄ±r.
        super.onDestroyView()
        _binding = null
    }

    // Toplam fiyatÄ± gÃ¼ncelleme fonksiyonu
    private fun updateTotalPrice(cartList: List<CartItem>) {
        val totalPrice = cartList.sumOf { (it.price ?: 0.0) * (it.count ?: 0) } // Null kontrolÃ¼ eklendi
        couponViewModel.totalPrice.observe(viewLifecycleOwner) { discounttPrice ->
            discountPrice = discounttPrice
        }

        discountPrice?.let { discount ->
            finalPrice = totalPrice - discount
        } ?: run {
            finalPrice = totalPrice
        }
        binding.textViewTotalPrice.text = String.format("Toplam: %.2f TL", finalPrice)
        /*val finalPrice = discountPrice ?: totalPrice
            binding.textViewTotalPrice.text = String.format("Toplam: %.2f TL", finalPrice)*/

        //ÅŸu kÄ±sÄ±mÄ± ekledik Ã§Ã¼nkÃ¼ sepet boÅŸ sayfasÄ± Ã¶zelliÄŸi eklediÄŸmizde
        //sepete eklene Ã¼rÃ¼nler sepet sayfamÄ±zda gÃ¶rÃ¼lmÃ¼yordu
        //sepete Ã¼rÃ¼n eklenince recycler view gÃ¼ncelleniyor kÄ±saca
        adapter.submitList(cartList)
        adapter.notifyDataSetChanged()
    }

    //popup ile silme gonksiyonnumuz
    private fun showDeleteDialog(productId: String) {
        val dialogView = LayoutInflater.from(requireContext()).inflate(R.layout.custom_delete_dialog, null)
        val dialog = AlertDialog.Builder(requireContext()).setView(dialogView).create()

        val btnCancel: Button? = dialogView.findViewById<Button>(R.id.btnCancel)
        val btnDelete: Button? = dialogView.findViewById<Button>(R.id.btnDelete)

        btnDelete?.setOnClickListener {
            viewModel.removeFromCart(productId) //ViewModelâ€™den silme iÅŸlemi Ã§aÄŸrÄ±ldÄ±
            dialog.dismiss()
        }

        btnCancel?.setOnClickListener {
            adapter.notifyDataSetChanged() //KaydÄ±rma iÅŸlemini geri almak iÃ§inn
            dialog.dismiss()
        }

        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)
        dialog.show()
    }
}











//null able olmaya durum iÃ§in
/*
package com.farukayata.e_commerce2.ui.fragment

import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.fragment.app.viewModels
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.ItemTouchHelper
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.farukayata.e_commerce2.databinding.FragmentCartBinding
import com.farukayata.e_commerce2.model.CartItem
import com.farukayata.e_commerce2.ui.adapter.CartAdapter
import com.farukayata.e_commerce2.ui.viewmodel.CartViewModel
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.collect

@AndroidEntryPoint
class CartFragment : Fragment() {

    private lateinit var binding: FragmentCartBinding
    private val viewModel: CartViewModel by viewModels()
    private lateinit var adapter: CartAdapter

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentCartBinding.inflate(inflater, container, false)

        // Adapter'Ä± oluÅŸturma ve lambda fonksiyonlarÄ± tanÄ±mlama
        adapter = CartAdapter(
            onRemoveClick = { productId ->
                viewModel.removeFromCart(productId) // ÃœrÃ¼nÃ¼ sepetten kaldÄ±r
            },
            onIncreaseClick = { cartItem ->
                viewModel.updateItemCount(cartItem.id.toString(), cartItem.count + 1) // Adeti artÄ±r
            },
            onDecreaseClick = { cartItem ->
                viewModel.updateItemCount(cartItem.id.toString(), cartItem.count - 1) // Adeti azalt
            }
        )

        // RecyclerView ayarlarÄ±
        binding.recyclerViewCart.layoutManager = LinearLayoutManager(requireContext())
        binding.recyclerViewCart.adapter = adapter

        // Sepet verilerini gÃ¶zlemle ve RecyclerView'a baÄŸla
        viewModel.cartItems.observe(viewLifecycleOwner) { cartList ->
            adapter.submitList(cartList) // Adapter'e yeni listeyi ilet
            updateTotalPrice(cartList) // Toplam fiyatÄ± gÃ¼ncelle
        }

        // ItemTouchHelper ile kartÄ± saÄŸdan sola kaydÄ±rarak silme Ã¶zelliÄŸi
        val itemTouchHelper = ItemTouchHelper(object : ItemTouchHelper.SimpleCallback(0, ItemTouchHelper.LEFT) {
            override fun onMove(
                recyclerView: RecyclerView,
                viewHolder: RecyclerView.ViewHolder,
                target: RecyclerView.ViewHolder
            ): Boolean {
                return false // TaÅŸÄ±ma iÅŸlemi yok
            }

            override fun onSwiped(viewHolder: RecyclerView.ViewHolder, direction: Int) {
                val position = viewHolder.adapterPosition
                val cartItem = adapter.currentList[position]
                viewModel.removeFromCart(cartItem.id.toString()) // KaydÄ±rÄ±lan Ã¼rÃ¼nÃ¼ sil
            }
        })
        itemTouchHelper.attachToRecyclerView(binding.recyclerViewCart)

        return binding.root
    }

    // Toplam fiyatÄ± gÃ¼ncelleme fonksiyonu
    private fun updateTotalPrice(cartList: List<CartItem>) {
        val totalPrice = cartList.sumOf { it.price * it.count }
        binding.textViewTotalPrice.text = String.format("Total: %.2f TL", totalPrice)
    }
}


 */